{"version":3,"sources":["apollo.ts","components/loading.tsx","pages/detail.tsx","pages/home.tsx","routers/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["isLogedIn","localStorage","getItem","isLoggedInVar","makeVar","Boolean","client","ApolloClient","uri","cache","InMemoryCache","typePolicies","Query","fields","isLoggedIn","read","Loading","className","height","width","color","radius","GET_MOVIE","gql","Detail","id","useParams","useQuery","variables","movie_id","parseInt","loading","error","data","console","log","movie","title","src","large_cover_image","alt","year","description_intro","suggesions","map","to","medium_cover_image","GET_MOVIES","Home","movies","DefaultRouter","path","exact","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.097f6906.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, makeVar } from \"@apollo/client\";\n\nconst isLogedIn = localStorage.getItem(\"isLogedIn\");\nexport const isLoggedInVar = makeVar(Boolean(isLogedIn));\n\nexport const client = new ApolloClient({\n  uri: \"https://movie-world-server.herokuapp.com/\",\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          isLoggedIn: {\n            read() {\n              return isLoggedInVar();\n            },\n          },\n        },\n      },\n    },\n  }),\n});\n","import React from \"react\";\nimport { ScaleLoader } from \"react-spinners\";\n\nexport const Loading = () => {\n  return (\n    <div className=\"bg-gray-900 w-screen h-screen flex flex-col items-center justify-center text-center text-white\">\n      <ScaleLoader height=\"80px\" width=\"32px\" color=\"#6b5ce7\" radius=\"8px\" />\n      <p>loading...</p>\n    </div>\n  );\n};\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Loading } from \"../components/loading\";\n\nconst GET_MOVIE = gql`\n  query getMovie($movie_id: Int!) {\n    movie(movie_id: $movie_id) {\n      title\n      rating\n      description_intro\n      large_cover_image\n      like_count\n      runtime\n      year\n    }\n    suggesions(movie_id: $movie_id) {\n      id\n      title\n      medium_cover_image\n      year\n    }\n  }\n`;\n\nexport const Detail = () => {\n  const { id } = useParams<{ id: string }>();\n  const { loading, error, data } = useQuery(GET_MOVIE, {\n    variables: { movie_id: parseInt(id) },\n  });\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    console.log(error);\n    return <span>error</span>;\n  }\n  //   console.log(data);\n  return (\n    <>\n      <Helmet>\n        <title>{data.movie.title} | Movie World</title>\n      </Helmet>\n      <div className=\"overflow-y-auto scrollbar-hide  h-screen flex flex-col items-center transition-all bg-gray-900\">\n        <header>\n          <h1 className=\"h-14 flex items-center text-white text-3xl sm:h-36 sm:text-5xl\">\n            Movie World\n          </h1>\n        </header>\n        <main className=\"max-w-5xl container w-screen h-screen px-2 mt-4 text-center text-white\">\n          <div className=\"sm:flex sm:flex-row\">\n            <img\n              className=\"w-full min-w-12 h-3/4 rounded-md object-cover px-1 py-1 bg-white sm:min-w-24 sm:max-w-sm\"\n              src={data.movie.large_cover_image}\n              alt={data.movie.title}\n            />\n            <div className=\"mt-4\">\n              <h1 className=\"mb-4 text-2xl\">\n                {data.movie.title}\n                <span className=\"text-sm\"> ({data.movie.year})</span>\n              </h1>\n              <span className=\"text-xl\">{data.movie.description_intro}</span>\n            </div>\n          </div>\n          <div className=\"my-4 text-lg\">추천영화</div>\n          <ul className=\"list-none container grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2\">\n            {data?.suggesions?.map((movie: any) => (\n              <Link key={movie.id} to={`/${movie.id}`}>\n                <li className=\"w-full min-w-12 h-96 text-white text-center truncate\">\n                  <img\n                    className=\"w-full min-w-12 h-80 rounded-md px-1 py-1 bg-white\"\n                    src={movie.medium_cover_image}\n                    alt={movie.title}\n                  />\n                  <span>{movie.title}</span>\n                  <div className=\"text-sm\">({movie.year})</div>\n                </li>\n              </Link>\n            ))}\n          </ul>\n        </main>\n        {/* <footer className=\"text-white\">footer</footer> */}\n      </div>\n    </>\n  );\n};\n","import { gql, useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Link } from \"react-router-dom\";\nimport { Loading } from \"../components/loading\";\n\nconst GET_MOVIES = gql`\n  query getMovies {\n    movies {\n      id\n      title\n      medium_cover_image\n      year\n    }\n  }\n`;\nexport const Home = () => {\n  const { loading, error, data } = useQuery(GET_MOVIES);\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) {\n    return <p>{error}</p>;\n  }\n  return (\n    <>\n      <Helmet>\n        <title>Movie World</title>\n      </Helmet>\n      <div className=\"overflow-y-auto scrollbar-hide h-screen flex flex-col items-center min-w-24 bg-gray-900 transition-all\">\n        <header>\n          <h1 className=\"h-14 flex items-center text-white text-3xl sm:h-36 sm:text-5xl\">\n            Movie World\n          </h1>\n        </header>\n        <ul className=\"list-none container grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n          {data?.movies?.map((movie: any) => (\n            <Link key={movie.id} to={`/${movie.id}`}>\n              <li className=\"w-full min-w-12 h-96 sm:h-104 text-white text-center truncate\">\n                <img\n                  className=\"w-full min-w-12 h-80 sm:h-100 rounded-md px-1 py-1 bg-white\"\n                  src={movie.medium_cover_image}\n                  alt={movie.title}\n                />\n                <span>{movie.title}</span>\n                <div className=\"text-sm\">({movie.year})</div>\n              </li>\n            </Link>\n          ))}\n        </ul>\n        {/* <footer className=\"text-white\">footer</footer> */}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Detail } from \"../pages/detail\";\nimport { Home } from \"../pages/home\";\nexport const DefaultRouter = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:id\">\n          <Detail />\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n","// import { useReactiveVar } from \"@apollo/client\";\nimport React from \"react\";\n// import { isLoggedInVar } from \"./apollo\";\nimport { DefaultRouter } from \"./routers\";\n\nfunction App() {\n  // const isLoggedIn = useReactiveVar(isLoggedInVar);\n  // return isLoggedIn ? <LoggedInRouter /> : <LoggedOutRouter />;\n  return <DefaultRouter />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloProvider } from \"@apollo/client\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { client } from \"./apollo\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./styles/tailwind.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}